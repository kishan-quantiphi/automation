AWSTemplateFormatVersion: '2010-09-09'
Description: ''
Parameters:
  SNSTopicName: 
    AllowedPattern: '[a-zA-Z_0-9-]+'
    ConstraintDescription: "Must include only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and must be between 1 and 256 characters long"
    Default: "KaustubhAssignmentTopic"
    Description: "Name of the SNS Topic"
    MaxLength: '256'
    MinLength: '1'
    Type: "String"
  SNSDisplayName: 
    ConstraintDescription: "Must be between 1 and 100 characters long"
    Default: "KaustubhAssignmentTopic"
    Description: "Display Name of the SNS Topic"
    MaxLength: '100'
    MinLength: '1'
    Type: "String"
  SubscriptionEmail:
    Description: "Email for notifications"
    AllowedPattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
    ConstraintDescription: "You should enter a valid email"
    MaxLength: '254'
    MinLength: '1'
    Default: "kaustubh.khavnekar@quantiphi.com"
    Type: "String"
  LambdaFunctionName:
    Description: "Name of Lambda function"
    Default: "KaustubhAssignmentLambda"
    AllowedPattern: '(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?'
    ConstraintDescription: "Must be between 1 and 140 characters long"
    MaxLength: '140'
    MinLength: '1'
    Type: "String"
  LambdaHandlerName:
    Description: "Handler of Lambda function"
    Default: "lambda_handler"
    AllowedPattern: '[^\s]+'
    ConstraintDescription: "Must be between 1 and 128 characters long"
    MaxLength: '128'
    MinLength: '1'
    Type: "String"
  LambdaHandlerName:
    Description: "Handler of Lambda function"
    Default: "lambda_handler"
    AllowedPattern: '[^\s]+'
    ConstraintDescription: "Must be between 1 and 128 characters long"
    MaxLength: '128'
    MinLength: '1'
    Type: "String"
  EventRuleName:
    Description: "Name of Scheduled Event Rule"
    Default: "KaustubhAssignmentEvent"
    AllowedPattern: '[\.\-_A-Za-z0-9]+'
    ConstraintDescription: "Must be between 1 and 64 characters long"
    MaxLength: '64'
    MinLength: '1'
    Type: "String"
Resources:
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: !Ref SNSDisplayName
      TopicName: !Ref SNSTopicName
  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref SubscriptionEmail
      Protocol: email
      TopicArn: !Ref SNSTopic
  LambdaMailer:
    Type: AWS::Lambda::Function
    Properties:
      Code: "./lambda.py"
      Description: "Lambda function to send a mail \"Hello World\""
      Environment:
        Variables: 
          - "TopicName": !Ref SNSTopic
      FunctionName: !Ref LambdaFunctionName
      Handler: !Ref LambdaHandlerName
      Runtime: "python3.7"
      Tags: 
        - 
          Key: "Email"
          Value: "kaustubh.khavnekar@quantiphi.com"
        - 
          Key: "office-time"
          Value: "Mumbai-10"
        - 
          Key: "Name"
          Value: "KaustubhAssignmentLambda"
        - 
          Key: "Project"
          Value: "Mumbai_PE_training"
        - 
          Key: "Username"
          Value: "kaustubh.khavnekar@quantiphi.com"
  SNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: "SNSPolicyId"
        Version: '2012-10-17'
        Statement:
        - Sid: "sns"
          Effect: "Allow"
          Principal:
            Fn::GetAtt: 
              - "LambdaMailer"
              - "Arn"
          Action:
            - sns:Publish
          Resource: "*"
      Topics:
      - !Ref SNSTopic
  ScheduledEvent:
    Type: AWS::Events::Rule
    Properties: 
      Description: "A CloudWatch event which triggers a Lambda function"
      Name: "KaustubhAssignmentEvent"
      ScheduleExpression: cron(30 4 * * ? *) # 4:30 AM UTC == 9:00 AM IST
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaMailer"
              - "Arn"
          Id: "TargetFunction"
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "LambdaMailer"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledEvent"
          - "Arn"
# Outputs:
  # PublicIP:
  #   Description: EC2 public IP
  #   Value: !GetAtt WebServer.PublicIp
  # WebsiteURL:
  #   Description: WordPress Website
  #   Value: !Sub "http://${WebServer.PublicDnsName}/wordpress"
